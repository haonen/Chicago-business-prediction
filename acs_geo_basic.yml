io:
  input_path: "./data/full_dataset.csv"
  roc_path: "./output/roc/"
  pr_path: "./output/pr/"
  out_path: "./output/performance.csv"

cols:
  x_cols:  ['gini index', 'health coverage population per capita', 'median household income', 'poverty rate per capita',
            'same house per capita', 'total population', 'unemployment rate', 'duration', 'application type',
            'conditional approval', 'license description', 'zip code', 'ward', 'year']
  y_col: ["license death"]
  time_col: ["year"]

transform:
  dummy:
    - cols : ['application type', 'conditional approval', 'license description', 'zip code', 'ward']
    - k: [30]
  imputation: 
    - cols:  ['application type', 'conditional approval', 'license description', 'zip code', 'ward']
    - loc_col: ["ward"]
    - time_col: ["year"]
  scaling:
    - cols: ['application type', 'conditional approval', 'license description', 'zip code', 'ward']

models:
  KNeighborsClassifier:
    n_neighbors: [1]
    weights: ['distance']
    algorithm: ['auto']
  DecisionTreeClassifier:
    criterion: ['gini']
    max_depth: [1]
    max_features: [None]
    min_samples_split: [2]
  RandomForestClassifier:
    n_estimators: [100]
    max_depth: [5]
    max_features: ['sqrt']
    min_samples_split: [2]
    n_jobs: [-1]
  ExtraTreesClassifier:
    n_estimators: [100]
    criterion: ['gini']
    max_depth: [5]
    max_features: ['sqrt']
    min_samples_split: [2]
    n_jobs: [-1]
  LogisticRegression:
    C: [0.1]
    penality: ["l2"]
    n_jobs: [-1]
  BaggingClassifier:
    n_estimators: [1]
  GradientBoostingClassifier:
    n_estimators: [100]
    learning_rate: [0.001]
    subsample: [0.1]
    max_depth: [5]
  AdaBoostClassifier:
    algorithm: ['SAMME']
    n_estimators: [1]
  GaussianNB:
    priors: [None]
  LinearSVC:
    C: [1]
    penalty: ["l2"]
    max_iter: [500]
  
time:
  start_year: 2009
  end_year: 2018
  update_period: 2
  test_period: 2
  
percentage: 30
